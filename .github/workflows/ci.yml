name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: self-hosted

    steps:
      - name: Clean workspace
        run: |
          sudo chmod -R 777 "${GITHUB_WORKSPACE}" 2>/dev/null || true
          sudo rm -rf "${GITHUB_WORKSPACE}"/*
          sudo rm -rf "${GITHUB_WORKSPACE}"/.[!.]* 2>/dev/null || true

      - uses: actions/checkout@v4

      - name: Créer fichier .env 
        run: |
          echo "DB_HOST=${{ vars.DB_HOST }}" >> .env
          echo "DB_PORT=${{ vars.DB_PORT }}" >> .env
          echo "DB_NAME=${{ vars.DB_NAME }}" >> .env
          echo "DB_USER=${{ vars.DB_USER }}" >> .env
          echo "DB_PASS=${{ vars.DB_PASS }}" >> .env
          echo "REDIS_HOST=${{ vars.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ vars.REDIS_PORT }}" >> .env
          echo "REDIS_DB=${{ vars.REDIS_DB }}" >> .env

      - name: Démarrer le conteneur
        run: docker compose up -d

      - name: Attendre MYSQL et vérifier l'initialisation
        run: |
          sleep 15
          timeout=90
          until docker exec mysql mysqladmin ping --silent; do
            sleep 3
            timeout=$((timeout - 3))
            if [ $timeout -le 0 ]; then
              docker logs mysql
              exit 1
            fi
          done
          
          sleep 10

          docker exec mysql mysql -u labo02 -plabo02 -D labo02_db -e "SHOW TABLES;" || {
            docker logs mysql
            exit 1
          }

      - name: Exécuter fichiers de test (TODO - inclure tous les tests)
        run: docker exec store_manager python -m pytest -v

      - name: Déploiement
        working-directory: src
        run: echo "TODO - Faire le déploiement"

      - name: Cleanup
        if: always()
        run: docker compose down -v